/*
* This file autogenerated;
*
* DO NOT EDIT
*
* {{ .Source.Info.Title }}
* Version: {{ .Source.Info.Version }}
*
* Generated by https://github.com/oasgo/oasgo
*/

package {{if eq $.PackageName ""}}
            client
        {{ else }}
            {{.PackageName}}
        {{ end }}

{{ $cName :=  (printf "HTTP%sClient" (goName .Source.Info.Title false) ) }}
{{ $iName := (printf (goName .Source.Info.Title false)) }}

var _ {{ $iName }} = new({{ $cName }})

type (
    {{ $iName}} interface {
        {{- range $_, $p := .Source.Paths -}}
            {{- range $m, $op := $p.GetMethodsMap }}
                {{ template "client_signature" toTemplate "Operation" $op "Method" $m -}}
            {{- end -}}
        {{- end}}
    }

    {{ $cName }} struct {
        URL *url.URL
        HTTP *http.Client
    }

    {{ .Source.Components.RenderDefinition }}
)

func New{{ $cName }} (host string) (*{{ $cName }}, error) {
	u, err := url.Parse(host)
	if err != nil {
		return nil, err
	}
	return &{{$cName}}{
		URL: u,
    HTTP: &http.Client{},
	}, nil
}

{{ range $u, $p := .Source.Paths -}}
	{{ range $m, $op := $p.GetMethodsMap }}
func (c {{ $cName }}) {{- template "client_signature" toTemplate "Operation" $op "Method" $m -}}{
	u := *c.URL
  u.Path = "{{- $u -}}"

  {{if $op.Parameters}}
    u.Path = strings.NewReplacer(
    {{- range $i, $arg := $op.Parameters}}
      {{- if eq $arg.In "path"}}
				{{- if not $arg.Required }}
					if {{- $arg.Name}} != nil {
				{{- end  }}
        "{{"{"}}{{- $arg.Name}}{{"}"}}", {{$arg.RenderAsString}},
				{{- if not $arg.Required }}
					}
				{{- end  }}
      {{- end }}
    {{- end }}
    ).Replace(u.Path)

    q := u.Query()
    {{- range $i, $arg := $op.Parameters}}
      {{- if eq $arg.In "query" }}
				{{- if not $arg.Required }}
					if {{ $arg.Name}} != nil {
				{{- end  }}
        q.Set("{{- $arg.Name}}", {{- $arg.RenderAsString}})
				{{ if not $arg.Required -}}
					}
				{{- end  }}
      {{- end }}
    {{- end }}
    u.RawQuery = q.Encode()
  {{end}}

  {{if ($op.GetBody $m)}}
      bs, err := json.Marshal(body)
      if err != nil {
        return nil, err
      }
      request, err := http.NewRequest("{{$m}}", u.String(), bytes.NewBuffer(bs))
  {{- else}}
      request, err := http.NewRequest("{{$m}}", u.String(), nil)
  {{- end }}
	if err != nil {
		return nil, err
	}

	resp, err := c.HTTP.Do(request)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

  if r, ok := res.(*string); ok {
    body, err := ioutil.ReadAll(resp.Body)

    if err != nil {
      return resp, err
    }

    *r = string(body)
    return resp, nil
  }

	if err = json.NewDecoder(resp.Body).Decode(res); err != nil {
    return resp, err
  }

  return resp, nil
}
	{{ end }}
{{- end }}
