/*
* This file autogenerated;
*
* DO NOT EDIT
*
* {{ .Source.Info.Title }}
* Version: {{ .Source.Info.Version }}
*
* Generated by https://github.com/oasgo/oasgo
*/

package  {{if eq $.PackageName ""}}
            server
         {{ else }}
            {{.PackageName}}
         {{ end }}

const (
        parameterIsMissingErr = "parameter %s is missing"
        invalidBodyErr = "invalid body"
        invalidParameterTypeErr = "invalid type of %s: %s"
)

type (
    MissingParameterError struct {
        field string
    }

    InvalidParameterTypeError struct {
        field string
        original error
    }

    InvalidBodyError struct {
    }

    {{ .Source.Components.RenderDefinition }}
)

func (e *MissingParameterError) Error() string {
    return fmt.Sprintf(parameterIsMissingErr, e.field)
}

func (e *InvalidParameterTypeError) Error() string {
    return fmt.Sprintf(invalidParameterTypeErr,  e.field, e.original.Error())
}

func (e *InvalidBodyError) Error() string {
    return invalidBodyErr
}

{{ range $u, $p := .Source.Paths -}}
    {{ range $m, $op := $p.GetMethodsMap -}}
        func {{ template "handlers_signature" $op -}}{
            {{- range $i, $arg := $op.Parameters}}
                {{- if or (eq $arg.In "query") (eq $arg.In "path")}}

                    {{- if eq $i 0 -}}
                        value :=
                    {{- else }}
                        value =
                    {{- end -}}
                    r.URL.Query().Get("{{- $arg.ExternalName}}")
                    {{- if $arg.Required }}
                        if value == "" {
                            err = &MissingParameterError{field:  "{{$arg.ExternalName}}"}
                            return
                        }
                    {{- end }}
                    {{($arg.RenderValueTo "value")}}
                    {{- if $arg.IsReturnsParsingError}}
                        if err != nil {
                            err = &InvalidParameterTypeError{
                                field:"{{$arg.ExternalName}}",
                                original: err,
                            }
                            return
                        }
                    {{- end }}
                {{- else if eq $arg.In "body"}}
                    var bs []byte
                    if bs, err = ioutil.ReadAll(r.Body); err != nil {
                        return
                    }
                    if err = json.Unmarshal(bs, &{{$arg.ToCamelCase}}); err != nil {
                        err = &InvalidBodyError{}
                        return
                    }
                {{- end }}
            {{- end }}
            return
        }
    {{ end }}
{{- end }}
