/*
* This file autogenerated;
*
* DO NOT EDIT
*
* {{ .Info.Title }}
* Version: {{ .Info.Version }}
*
*/

package server

type (
    {{ range $_, $schema := .Components.Schemas }}
    	{{- $schema.RenderDefinition }}
    {{ end }}
)

{{ range $u, $p := .Paths -}}
    {{ range $m, $op := $p.GetMethodsMap -}}
        func {{ template "handlers_signature" $op -}}{
            {{- range $i, $arg := $op.Parameters}}
                {{- if or (eq $arg.In "query") (eq $arg.In "path")}}

                    {{- if eq $i 0 -}}
                        value :=
                    {{- else }}
                        value =
                    {{- end -}}
                    r.URL.Query().Get("{{- $arg.Name}}")
                    {{- if $arg.Required }}
                        if value == "" {
                            err = errors.New(fmt.Sprintf("Not find required arg: %s", "{{- $arg.Name}}"))
                            return
                        }
                    {{- end }}
                    {{($arg.RenderValueTo "value")}}
                    {{- if $arg.IsReturnsParsingError}}
                        if err != nil {
                            err = errors.New(fmt.Sprintf("Parsing error: %s for arg: %s", err.Error(), "{{- $arg.Name}}"))
                            return
                        }
                    {{- end }}
                {{- else if eq $arg.In "body"}}
                    bs, errl := ioutil.ReadAll(r.Body)
                    if errl != nil {
                        err = errors.New(fmt.Sprintf("Can not read request body: %s", errl.Error()))
                        return
                    }
                    err = json.Unmarshal(bs, &{{$arg.Name}})
                    if err != nil {
                        err = errors.New(fmt.Sprintf("Incorrect request body: %s", string(bs)))
                        return
                    }
                {{- end }}
            {{- end }}
            return
        }
    {{ end }}
{{- end }}