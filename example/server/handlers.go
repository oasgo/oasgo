/*
* This file autogenerated;
*
* DO NOT EDIT
*
* Swagger Petstore
* Version: 1.0.0
*
 */

package server

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
)

const (
	NotFindRequiredArgErr    = "not find required arg: %s"
	ParsingErr               = "parsing error: %s for arg: %s"
	CannotReadRequestBodyErr = "can not read request body: %s"
	IncorrectRequestBodyErr  = "incorrect request body: %s"
)

type (
	Error struct {
		Code    int64  `json:"code"`
		Message string `json:"message"`
	}

	Pet struct {
		ID   int64  `json:"id"`
		Name string `json:"name"`
		Tag  string `json:"tag"`
	}

	Pets []Pet

	PetsLala []int64
)

func ListPets(r *http.Request) (limit *int64, fancyQueryArg int64, err error) {
	value := r.URL.Query().Get("limit")
	*limit, err = strconv.ParseInt(value, 10, 64)
	if err != nil {
		err = fmt.Errorf(ParsingErr, "limit", err.Error())
		return
	}
	value = r.URL.Query().Get("fancy_query_arg")
	if value == "" {
		err = fmt.Errorf(NotFindRequiredArgErr, "fancy_query_arg")
		return
	}
	fancyQueryArg, err = strconv.ParseInt(value, 10, 64)
	if err != nil {
		err = fmt.Errorf(ParsingErr, "fancy_query_arg", err.Error())
		return
	}
	return
}
func CreatePet(r *http.Request) (body Pet, err error) {
	bs, errl := ioutil.ReadAll(r.Body)
	if errl != nil {
		err = fmt.Errorf(CannotReadRequestBodyErr, errl.Error())
		return
	}
	err = json.Unmarshal(bs, &body)
	if err != nil {
		err = fmt.Errorf(IncorrectRequestBodyErr, string(bs))
		return
	}
	return
}
func ShowPetById(r *http.Request) (petId string, err error) {
	value := r.URL.Query().Get("petId")
	if value == "" {
		err = fmt.Errorf(NotFindRequiredArgErr, "petId")
		return
	}
	petId = value
	return
}
