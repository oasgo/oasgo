/*
* This file autogenerated;
*
* DO NOT EDIT
*
* Swagger Petstore
* Version: 1.0.0
*
 */

package server

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
)

var _ HTTPSwaggerPetstoreHelper = new(HTTPSwaggerPetstoreServer)

type (
	HTTPSwaggerPetstoreHelper interface {
		ListPets(r *http.Request) (limit *int64, fancy_query_arg int64, err error)
		CreatePet(r *http.Request) (body Pet, err error)
		ShowPetById(r *http.Request) (petId string, err error)
	}

	HTTPSwaggerPetstoreServer struct{}

	Error struct {
		Code    int64  `json:"code"`
		Message string `json:"message"`
	}

	Pet struct {
		ID   int64  `json:"id"`
		Name string `json:"name"`
		Tag  string `json:"tag"`
	}

	Pets []Pet

	PetsLala []int64
)

func NewHTTPSwaggerPetstoreServer(host, port string, isUseSSL bool) *HTTPSwaggerPetstoreServer {
	return &HTTPSwaggerPetstoreServer{}
}

func (c *HTTPSwaggerPetstoreServer) ListPets(r *http.Request) (limit *int64, fancy_query_arg int64, err error) {
	value := r.URL.Query().Get("limit")
	*limit, err = strconv.ParseInt(value, 10, 64)
	if err != nil {
		err = errors.New(fmt.Sprintf("Parsing error: %s for arg: %s", err.Error(), "limit"))
		return
	}
	value = r.URL.Query().Get("fancy_query_arg")
	if value == "" {
		err = errors.New(fmt.Sprintf("Not find required arg: %s", "fancy_query_arg"))
		return
	}
	fancy_query_arg, err = strconv.ParseInt(value, 10, 64)
	if err != nil {
		err = errors.New(fmt.Sprintf("Parsing error: %s for arg: %s", err.Error(), "fancy_query_arg"))
		return
	}
	return
}

func (c *HTTPSwaggerPetstoreServer) CreatePet(r *http.Request) (body Pet, err error) {
	bs, errl := ioutil.ReadAll(r.Body)
	if errl != nil {
		err = errors.New(fmt.Sprintf("Can not read request body: %s", errl.Error()))
		return
	}
	err = json.Unmarshal(bs, &body)
	if err != nil {
		err = errors.New(fmt.Sprintf("Incorrect request body: %s", string(bs)))
		return
	}
	return
}

func (c *HTTPSwaggerPetstoreServer) ShowPetById(r *http.Request) (petId string, err error) {
	value := r.URL.Query().Get("petId")
	if value == "" {
		err = errors.New(fmt.Sprintf("Not find required arg: %s", "petId"))
		return
	}
	petId = value
	return
}
