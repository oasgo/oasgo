/*
* This file autogenerated;
*
* DO NOT EDIT
*
* Ecommerce API
* Version: 3.0.0
*
 */

package server

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	parameterIsMissingErr   = "parameter %s is missing"
	invalidBodyErr          = "invalid body"
	invalidParameterTypeErr = "invalid type of %s: %s"
)

type (
	MissingParameterError struct {
		field string
	}

	InvalidParameterTypeError struct {
		field    string
		original error
	}

	InvalidBodyError struct {
	}

	Account struct {
		Address AccountAddress `json:"address"`
		Email   string         `json:"email"`
		ID      string         `json:"id"`
		Name    string         `json:"name"`
	}

	AccountAddress struct {
		Address    []string `json:"address"`
		City       string   `json:"city"`
		Country    string   `json:"country"`
		ID         string   `json:"id"`
		Name       string   `json:"name"`
		PostalCode string   `json:"postal_code"`
		State      string   `json:"state"`
	}

	AccountPMToken struct {
		ID    string `json:"id"`
		Token string `json:"token"`
	}

	AccountPaymentMethodTokenRequestMetadata struct {
		Currency        string `json:"currency"`
		ErrorCallback   string `json:"error_callback"`
		SuccessCallback string `json:"success_callback"`
	}

	CreateAccountPaymentMethodTokenRequest struct {
		Metadata          AccountPaymentMethodTokenRequestMetadata `json:"metadata"`
		PaymentMethodType string                                   `json:"payment_method_type"`
	}

	CreateAccountPaymentMethodTokenResponse struct {
		Token AccountPMToken `json:"token"`
	}

	CreateAccountRequest struct {
		Account Account `json:"account"`
	}

	CreateAccountResponse struct {
		Account Account `json:"account"`
	}

	Error struct {
		Code    int64  `json:"code"`
		Message string `json:"message"`
	}

	GetAccountPaymentMethodsResponse struct {
		PaymentMethods []*PaymentMethod    `json:"payment_methods"`
		Status         PaymentMethodStatus `json:"status"`
	}

	GetAccountsResponse struct {
		Account Account `json:"account"`
	}

	NameValue struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	}

	PMDetails struct {
		Email      string `json:"email"`
		LastDigits string `json:"last-digits"`
	}

	PaymentMethod struct {
		Details           PMDetails `json:"details"`
		ID                string    `json:"id"`
		PaymentMethodType string    `json:"payment_method_type"`
	}

	PaymentMethodStatus struct {
		RequestID      string       `json:"request_id"`
		VendorRequests []*NameValue `json:"vendor_requests"`
	}

	RegisterAccountPaymentMethodRequest struct {
		PaymentMethod PaymentMethod `json:"payment_method"`
	}

	RegisterAccountPaymentMethodResponse struct {
		PaymentMethod PaymentMethod       `json:"payment_method"`
		Status        PaymentMethodStatus `json:"status"`
	}
)

func (e *MissingParameterError) Error() string {
	return fmt.Sprintf(parameterIsMissingErr, e.field)
}

func (e *InvalidParameterTypeError) Error() string {
	return fmt.Sprintf(invalidParameterTypeErr, e.field, e.original.Error())
}

func (e *InvalidBodyError) Error() string {
	return invalidBodyErr
}

func GetAccounts(r *http.Request) (accountId string, accountPcode string, err error) {
	value := r.URL.Query().Get("account_id")
	if value == "" {
		err = &MissingParameterError{field: "account_id"}
		return
	}
	accountId = value
	value = r.URL.Query().Get("account_pcode")
	if value == "" {
		err = &MissingParameterError{field: "account_pcode"}
		return
	}
	accountPcode = value
	return
}
func CreateAccount(r *http.Request) (accountId string, accountPcode string, body CreateAccountRequest, err error) {
	value := r.URL.Query().Get("account_id")
	if value == "" {
		err = &MissingParameterError{field: "account_id"}
		return
	}
	accountId = value
	value = r.URL.Query().Get("account_pcode")
	if value == "" {
		err = &MissingParameterError{field: "account_pcode"}
		return
	}
	accountPcode = value
	var bs []byte
	if bs, err = ioutil.ReadAll(r.Body); err != nil {
		return
	}
	if err = json.Unmarshal(bs, &body); err != nil {
		err = &InvalidBodyError{}
		return
	}
	return
}
func GetAccountPaymentMethods(r *http.Request) (accountId string, accountPcode string, bvId string, err error) {
	value := r.URL.Query().Get("account_id")
	if value == "" {
		err = &MissingParameterError{field: "account_id"}
		return
	}
	accountId = value
	value = r.URL.Query().Get("account_pcode")
	if value == "" {
		err = &MissingParameterError{field: "account_pcode"}
		return
	}
	accountPcode = value
	value = r.URL.Query().Get("bv_id")
	if value == "" {
		err = &MissingParameterError{field: "bv_id"}
		return
	}
	bvId = value
	return
}
func RegisterAccountPaymentMethod(r *http.Request) (accountId string, accountPcode string, bvId string, body RegisterAccountPaymentMethodRequest, err error) {
	value := r.URL.Query().Get("account_id")
	if value == "" {
		err = &MissingParameterError{field: "account_id"}
		return
	}
	accountId = value
	value = r.URL.Query().Get("account_pcode")
	if value == "" {
		err = &MissingParameterError{field: "account_pcode"}
		return
	}
	accountPcode = value
	value = r.URL.Query().Get("bv_id")
	if value == "" {
		err = &MissingParameterError{field: "bv_id"}
		return
	}
	bvId = value
	var bs []byte
	if bs, err = ioutil.ReadAll(r.Body); err != nil {
		return
	}
	if err = json.Unmarshal(bs, &body); err != nil {
		err = &InvalidBodyError{}
		return
	}
	return
}
func CreateAccountPaymentMethodToken(r *http.Request) (accountId string, accountPcode string, bvId string, body CreateAccountPaymentMethodTokenRequest, err error) {
	value := r.URL.Query().Get("account_id")
	if value == "" {
		err = &MissingParameterError{field: "account_id"}
		return
	}
	accountId = value
	value = r.URL.Query().Get("account_pcode")
	if value == "" {
		err = &MissingParameterError{field: "account_pcode"}
		return
	}
	accountPcode = value
	value = r.URL.Query().Get("bv_id")
	if value == "" {
		err = &MissingParameterError{field: "bv_id"}
		return
	}
	bvId = value
	var bs []byte
	if bs, err = ioutil.ReadAll(r.Body); err != nil {
		return
	}
	if err = json.Unmarshal(bs, &body); err != nil {
		err = &InvalidBodyError{}
		return
	}
	return
}
