/*
* DO NOT EDIT
*
* Swagger Petstore
* Version: 1.0.0
*
* Generated by go-swagger-client
* https://git.corp.ooyala.com/projects/COMMON-GO/repos/go-swagger-client
 */

package client

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

var _ SwaggerPetstore = new(HTTPSwaggerPetstoreClient)

type SwaggerPetstore interface {
	ListPets(res interface{}, limit *int, fancy_query_arg int) (*http.Response, error)
	CreatePet(res interface{}) (*http.Response, error)
	ShowPetById(res interface{}, petId string) (*http.Response, error)
}

type HTTPSwaggerPetstoreClient struct {
	URL  *url.URL
	HTTP *http.Client
}

type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type Pet struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Tag  string `json:"tag"`
}

type Pets []Pet

type PetsLala []int

func NewHTTPSwaggerPetstoreClient(host string) (*HTTPSwaggerPetstoreClient, error) {
	u, err := url.Parse(host)
	if err != nil {
		return nil, err
	}
	return &HTTPSwaggerPetstoreClient{
		URL:  u,
		HTTP: &http.Client{},
	}, nil
}

// ListPets
func (c HTTPSwaggerPetstoreClient) ListPets(res interface{}, limit *int, fancy_query_arg int) (*http.Response, error) {
	u := *c.URL
	u.Path = "/pets"

	u.Path = strings.NewReplacer().Replace(u.Path)

	q := u.Query()
	if limit != nil {
		q.Set("limit", strconv.Itoa(*limit))
	}
	q.Set("fancy_query_arg", strconv.Itoa(fancy_query_arg))

	u.RawQuery = q.Encode()

	request, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := c.HTTP.Do(request)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if r, ok := res.(*string); ok {
		body, err := ioutil.ReadAll(resp.Body)

		if err != nil {
			return resp, err
		}

		*r = string(body)
		return resp, nil
	}

	if err = json.NewDecoder(resp.Body).Decode(res); err != nil {
		return resp, err
	}

	return resp, nil
}

// CreatePet
func (c HTTPSwaggerPetstoreClient) CreatePet(res interface{}) (*http.Response, error) {
	u := *c.URL
	u.Path = "/pets"

	request, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := c.HTTP.Do(request)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if r, ok := res.(*string); ok {
		body, err := ioutil.ReadAll(resp.Body)

		if err != nil {
			return resp, err
		}

		*r = string(body)
		return resp, nil
	}

	if err = json.NewDecoder(resp.Body).Decode(res); err != nil {
		return resp, err
	}

	return resp, nil
}

// ShowPetById
func (c HTTPSwaggerPetstoreClient) ShowPetById(res interface{}, petId string) (*http.Response, error) {
	u := *c.URL
	u.Path = "/pets/{petId}"

	u.Path = strings.NewReplacer(
		"{petId}", petId,
	).Replace(u.Path)

	q := u.Query()
	u.RawQuery = q.Encode()

	request, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := c.HTTP.Do(request)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if r, ok := res.(*string); ok {
		body, err := ioutil.ReadAll(resp.Body)

		if err != nil {
			return resp, err
		}

		*r = string(body)
		return resp, nil
	}

	if err = json.NewDecoder(resp.Body).Decode(res); err != nil {
		return resp, err
	}

	return resp, nil
}
